networks:
  # 代理专用网络
  traefik:
    name: traefik

volumes:
  redis-storage:
    name: redis-storage
  mysql-storage:
    name: mysql-storage
  consul-storage:
    name: consul-storage
  grafana-storage:
    name: grafana-storage
  tempo-storage:
    name: tempo-storage
  prometheus-storage:
    name: prometheus-storage
  vm-storage:
    name: vm-storage
  sftp-storage:
    name: sftp-storage
  emqx-data-storage:
    name: emqx-data-storage
  emqx-log-storage:
    name: emqx-log-storage
  ollama-storage:
    name: ollama-storage
  weaviate-storage:
    name: weaviate-storage

services:
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    restart: always
    mem_limit: 1g
    memswap_limit: 1g
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker # 启用 controller, 使用 Kafka Raft 替代 ZooKeeper
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://host.docker.internal:9092 # 广播给客户端的地址
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER # 指定 controller 监听器
    ports:
      - 9092:9092

  influxdb:
    image: influxdb:latest
    container_name: influxDB
    restart: always
    mem_limit: 1g
    memswap_limit: 1g
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: root
      DOCKER_INFLUXDB_INIT_PASSWORD: ${ROOT_PASS}
      DOCKER_INFLUXDB_INIT_ORG: test_org
      DOCKER_INFLUXDB_INIT_BUCKET: test_bucket
      DOCKER_INFLUXDB_INIT_RETENTION: 1w
    ports:
      - 8086:8086

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    mem_limit: 512m
    memswap_limit: 512m
    volumes:
      - redis-storage:/data
    ports:
      - 6379:6379

  mysql:
    image: mysql:latest
    container_name: mysql
    restart: always
    mem_limit: 1g
    memswap_limit: 1g
    environment:
      MYSQL_ROOT_PASSWORD: ${ROOT_PASS}
      MYSQL_DATABASE: test_db
      MYSQL_USER: ckk
      MYSQL_PASSWORD: ${ROOT_PASS}
    volumes:
      - mysql-storage:/var/lib/mysql
    ports:
      - 3306:3306

  # 本地测试部署单服务节点即可
  # 官方推荐使用host网络，降低网络延迟，但是host网络不支持Windows，因此还是使用bridge
  consul-server:
    image: hashicorp/consul:latest
    container_name: consul-server
    restart: always
    mem_limit: 512m
    memswap_limit: 512m
    volumes:
      - consul-storage:/consul/data
    ports:
      - 8300-8302:8300-8302/tcp
      - 8500:8500/tcp
      - 8600:8600/tcp
      - 8301-8302:8301-8302/udp
      - 8600:8600/udp
    command:
      - agent
      - -server
      - -bind=0.0.0.0 # 节点内部通信服务接口绑定的地址
      - -advertise=${HOST_IP} # 广播给集群中其它节点的地址
      - -bootstrap-expect=1 # 期望的服务端节点个数
      - -node=consul-server-1
      - -client=0.0.0.0 # 客户端接口（包括webui）绑定的地址
      - -ui

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    mem_limit: 1g
    memswap_limit: 1g
    ports:
      - 15672:15672 # dashboard
      - 5672:5672
    environment:
      - RABBITMQ_DEFAULT_USER=ckk
      - RABBITMQ_DEFAULT_PASS=${ROOT_PASS}

  traefik:
    image: traefik:latest
    container_name: traefik
    restart: always
    networks:
      - default # compose默认创建的网络
      - traefik
    mem_limit: 512m
    memswap_limit: 512m
    command:
      - --configFile=/etc/traefik/traefik.yaml
    volumes:
      - ./config/traefik:/etc/traefik
      - /var/run/docker.sock:/var/run/docker.sock # 用于docker-provider
    ports:
      - 8080:8080 # dashboard
      - 4043-4045:4043-4045 # tcp
      - 8000:8000 # web
      - 8001:8001 # web-tls

  grafana:
    image: grafana/grafana-enterprise:latest
    container_name: grafana
    restart: always
    mem_limit: 1g
    memswap_limit: 1g
    ports:
      - 3000:3000
    volumes:
      - grafana-storage:/var/lib/grafana

  # trace backend
  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    restart: always
    mem_limit: 1g
    memswap_limit: 1g
    user: root
    volumes:
      - ./config/tempo/tempo.yaml:/etc/tempo.yaml
      - tempo-storage:/tmp/tempo
    command:
      - -config.file=/etc/tempo.yaml

  otel-collector:
    image: otel/opentelemetry-collector-contrib
    container_name: otel-collector
    restart: always
    mem_limit: 1g
    memswap_limit: 1g
    volumes:
      - ./config/otel-collector/config.yaml:/etc/otelcol-contrib/config.yaml
    ports:
      - 1777:1777 # pprof extension
      - 8888:8888 # Prometheus metrics exposed by the Collector
      - 8889:8889 # Prometheus exporter metrics
      - 13133:13133 # health_check extension
      - 4317:4317 # OTLP gRPC receiver
      - 4318:4318 # OTLP http receiver

  # 对接Loki的pipeline组件
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    restart: always
    mem_limit: 1g
    memswap_limit: 1g
    ports:
      - 9080:9080 # 暴露ui界面
    volumes:
      - ./config/promtail:/etc/promtail
    command:
      - -print-config-stderr
      - -config.file=/etc/promtail/config.yaml

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    ports:
      - 9090:9090
    mem_limit: 1g
    memswap_limit: 1g
    command:
      - --config.file=/etc/prometheus/prometheus.yaml # specify config file
      - --storage.tsdb.path=/prometheus # specify storage path
      - --storage.tsdb.retention.time=1w # 数据保持时间
      - --web.enable-lifecycle # 允许热加载配置文件和告警规则文件
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus-storage:/prometheus

  victoriametrics:
    image: victoriametrics/victoria-metrics:v1.121.0
    container_name: victoriametrics
    restart: always
    ports:
      - "8428:8428" # HTTP 查询和写入接口
    volumes:
      - vm-storage:/victoria-metrics-data
    command:
      - "-retentionPeriod=10y" # 保留 10 年
      - "-storageDataPath=/victoria-metrics-data"
      - "-loggerLevel=INFO"
      - "-search.maxUniqueTimeseries=1000000" # 查询性能限制（可按需调整）

  jaeger-aio:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger-aio
    restart: always
    mem_limit: 1g
    memswap_limit: 1g
    ports:
      - 16686:16686 # dashboard
      - 4317:4317 # otlp-grpc
      - 4318:4318 # otlp-http
    environment:
      COLLECTOR_OTLP_ENABLED: true

  sftp:
    image: atmoz/sftp:latest
    container_name: sftp
    restart: always
    mem_limit: 512m
    memswap_limit: 512m
    ports:
      - 2222:22/tcp
    volumes:
      - C:/users/ckk/.ssh/id_rsa:/etc/ssh/ssh_host_rsa_key:ro # 和主机私钥保持一致，否则每次创建容器私钥会变更
      - C:/users/ckk/.ssh/id_ed25519:/etc/ssh/ssh_host_ed25519_key:ro
      - sftp-storage:/home
    command:
      - ckk:my-root-password:::upload # 使用默认uid/gid，文件上传到子目录`upload`

  emqx:
    image: emqx/emqx:5.8
    container_name: emqx
    restart: always
    mem_limit: 1g
    memswap_limit: 1g
    ports: # 生产建议用host网络
      - 1883:1883 # MQTT over TCP
      - 18083:18083 # Admin API and Dashboard(admin:public)
      # - 8883:8883 # MQTT over SSL/TLS
      # - 8083:8083 # MQTT over WebSocket
      # - 8084:8084 # MQTT over WSS
      # 4370/5370 for cluster communication
    environment:
      - EMQX_NAME=emqx
      - EMQX_HOST=node.emqx.io # 节点名称=${EMQX_NAME}@${EMQX_HOST}
      - EMQX_CLUSTER__DISCOVERY_STRATEGY=static
      - EMQX_CLUSTER__STATIC__SEEDS=[emqx@node.emqx.io]
      - EMQX_NODE__COOKIE=emqx_for_dev # emqx节点只会连接cookie相同的集群节点
      - EMQX_MQTT__MAX_PACKET_SIZE=5MB # MQTT报文大小限值
      - EMQX_AUTHORIZATION__NO_MATCH=deny # 拒绝未匹配ACL规则的客户端
      # 共享订阅
      - EMQX_MQTT__SHARED_SUBSCRIPTION=true
      - EMQX_MQTT__SHARED_SUBSCRIPTION_STRATEGY=sticky
      # 关闭不使用的监听
      - EMQX_LISTENERS__SSL__DEFAULT__ENABLED=false
      - EMQX_LISTENERS__WS__DEFAULT__ENABLED=false
      - EMQX_LISTENERS__WSS__DEFAULT__ENABLED=false
    healthcheck:
      test: ["CMD", "/opt/emqx/bin/emqx", "ctl", "status"]
      interval: 5s
      timeout: 25s
      retries: 5
    networks: # 多机部署使用`extra_hosts`实现相同功能
      default:
        aliases:
          - node.emqx.io # 允许同网络其它节点通过`EMQX_HOST`访问本节点
    volumes:
      - emqx-data-storage:/opt/emqx/data
      - emqx-log-storage:/opt/emqx/log

  frpc:
    image: fatedier/frpc:v0.48.0
    container_name: frpc
    restart: always
    mem_limit: 256m
    memswap_limit: 256m
    volumes:
      - ./config/frp/frpc.ini:/etc/frpc/frpc.ini:ro
    command:
      - -c
      - /etc/frpc/frpc.ini

  haproxy:
    image: haproxy:latest
    container_name: haproxy
    restart: always
    ulimits:
      nofile:
        soft: 1024000
        hard: 1024000
    mem_limit: 256m
    memswap_limit: 256m
    privileged: true # 需要加，否则可能无法访问 # TODO: 不安全的操作，应该有更好的解决方案
    ports: # 生产建议用host网络
      - 1883:1883
      - 8883:8883
      - 18888:8888
    volumes:
      - ./config/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./config/haproxy/certs:/etc/haproxy/certs
      - ./config/haproxy/scripts:/etc/haproxy/scripts # lua脚本

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    restart: always
    mem_limit: 10g
    memswap_limit: 10g
    ports:
      - 11434:11434
    volumes:
      - ollama-storage:/root/.ollama

  weaviate:
    image: cr.weaviate.io/semitechnologies/weaviate:1.28.2
    container_name: weaviate
    restart: always
    mem_limit: 512m
    memswap_limit: 512m
    ports:
      - 8080:8080
      - 50051:50051
    volumes:
      - weaviate-storage:/var/lib/weaviate
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: true
      PERSISTENCE_DATA_PATH: /var/lib/weaviate
      DEFAULT_VECTORIZER_MODULE: none
      ENABLE_MODULES: ""
      CLUSTER_HOSTNAME: node1
    command:
      - --host
      - 0.0.0.0
      - --port
      - "8080"
      - --scheme
      - http
