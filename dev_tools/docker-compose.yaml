version: "3"
services:
    influxDB:
        image: influxdb:latest
        container_name: influxDB
        restart: always
        hostname: ${HOST_NAME}
        mem_limit: 1g
        memswap_limit: 1g
        environment:
            DOCKER_INFLUXDB_INIT_MODE: setup
            DOCKER_INFLUXDB_INIT_USERNAME: root
            DOCKER_INFLUXDB_INIT_PASSWORD: ${ROOT_PASS}
            DOCKER_INFLUXDB_INIT_ORG: test_org
            DOCKER_INFLUXDB_INIT_BUCKET: test_bucket
            DOCKER_INFLUXDB_INIT_RETENTION: 1w
        ports:
            - 8086:8086

    redis-json:
        image: redislabs/rejson:latest
        container_name: redis-json
        restart: always
        hostname: ${HOST_NAME}
        mem_limit: 1g
        memswap_limit: 1g
        ports:
            - 6379:6379

    mysql:
        image: mysql:latest
        container_name: mysql
        restart: always
        hostname: ${HOST_NAME}
        mem_limit: 1g
        memswap_limit: 1g
        environment:
            MYSQL_ROOT_PASSWORD: ${ROOT_PASS}
            MYSQL_DATABASE: test_db
            MYSQL_USER: ckk
            MYSQL_PASSWORD: ${ROOT_PASS}
        ports:
            - 3306:3306

    # 本地测试部署单服务节点即可
    # 官方推荐使用host网络，降低网络延迟，但是host网络不支持Windows，因此还是使用bridge
    consul_server:
        image: consul:latest
        container_name: consul_server
        restart: always
        hostname: ${HOST_NAME}
        mem_limit: 1g
        memswap_limit: 1g
        volumes:
            - G:/consul_data:/consul/data
        ports:
            - 8300-8302:8300-8302/tcp
            - 8500:8500/tcp
            - 8600:8600/tcp
            - 8301-8302:8301-8302/udp
            - 8600:8600/udp
        command:
            - agent
            - -server
            - -bind=0.0.0.0 # 节点内部通信服务接口绑定的地址
            - -advertise=${HOST_IP} # 广播给集群中其它节点的本机ip
            - -bootstrap-expect=1 # 期望的服务端节点个数
            - -node=consul-server-1
            - -client=0.0.0.0 # 客户端接口（包括webui）绑定的地址
            - -ui

    rabbitmq:
        image: rabbitmq:3-management
        container_name: rabbitmq
        restart: always
        hostname: ${HOST_NAME}
        mem_limit: 1g
        memswap_limit: 1g
        ports:
            - 15672:15672
            - 5672:5672
        environment:
            - RABBITMQ_DEFAULT_USER=ckk
            - RABBITMQ_DEFAULT_PASS=${ROOT_PASS}

    zookeeper:
        image: wurstmeister/zookeeper:latest
        container_name: zookeeper
        restart: always
        hostname: ${HOST_NAME}
        mem_limit: 1g
        memswap_limit: 1g
        ports:
            - 2181:2181

    kafka:
        image: wurstmeister/kafka:latest
        container_name: kafka
        restart: always
        hostname: ${HOST_NAME}
        mem_limit: 1g
        memswap_limit: 1g
        ports:
            - 9092:9092
        environment:
            - KAFKA_ADVERTISED_HOST_NAME=${HOST_IP}
            - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
        depends_on:
            - zookeeper

    traefik:
        image: traefik:latest
        container_name: traefik
        restart: always
        hostname: ${HOST_NAME}
        networks:
            - traefik
        mem_limit: 1g
        memswap_limit: 1g
        ports:
            - 8080:8080
            - 80:80
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ./config/traefik/traefik.yaml:/etc/traefik/traefik.yml

networks:
    # 外部定义一个代理专用网络
    traefik:
        external: true
